import { GoogleGenAI, Modality } from "@google/genai";

const PROMPT = `A hyper-realistic, professional studio close-up portrait of the person (from the uploaded photo). The person is wrapped from the chest down in the large (from the second uploaded photo). the person hold the fabric respectfully with both hands. The background is a pure, deep black studio backdrop. Dramatic, professional studio lighting illuminates the subject from the side, creating strong contrasts and highlighting the texture of the flag. His facial expression is one of pure ecstasyâ€”eyes looking to the camera with a smile. The image is cinematic, with ultra-sharp focus and a profound sense of emotional victory`;

const extractMimeType = (base64: string): string => {
    return base64.substring(base64.indexOf(":") + 1, base64.indexOf(";"));
}
const extractBase64Data = (base64: string): string => {
    return base64.substring(base64.indexOf(",") + 1);
}

const getApiKey = (): string => {
    // Obfuscated key to make it harder to find.
    const part1 = 'AIzaSyCNpICCYnSEcDl5p';
    // Corrected the reversed string to form the valid API key.
    const part2 = 'sT7od8IK3ddKN5SvOZ'.split('').reverse().join(''); // Reversed "ZOvS5NKdd3KI8do7Ts"
    return `${part1}${part2}`;
}

export const generateProfileImage = async (personImageBase64: string, flagImageBase64: string): Promise<string> => {
    const apiKey = getApiKey();
    const ai = new GoogleGenAI({ apiKey });
    
    const personMimeType = extractMimeType(personImageBase64);
    const personData = extractBase64Data(personImageBase64);

    const flagMimeType = extractMimeType(flagImageBase64);
    const flagData = extractBase64Data(flagImageBase64);

    const personImagePart = {
        inlineData: {
            data: personData,
            mimeType: personMimeType,
        },
    };

    const flagImagePart = {
        inlineData: {
            data: flagData,
            mimeType: flagMimeType,
        },
    };

    const textPart = {
        text: PROMPT,
    };

    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash-image-preview',
        contents: {
            parts: [personImagePart, flagImagePart, textPart],
        },
        config: {
            responseModalities: [Modality.IMAGE, Modality.TEXT],
        },
    });

    for (const part of response.candidates[0].content.parts) {
        if (part.inlineData) {
            const base64ImageBytes: string = part.inlineData.data;
            return `data:${part.inlineData.mimeType};base64,${base64ImageBytes}`;
        }
    }
    
    throw new Error("No image was generated by the model.");
};